- title "#{@user.name}'s Anime Library"

.large-12.columns.option-bar.hide-for-small
  .small-6.large-2.columns
    %p.option-title Anime Library

  .small-12.large-10.columns.options
    %ul.status-tabs.inline-list
      %li.active#tab-all= link_to "All", "#all", onclick: "showRelevantSections('all')"
      - Watchlist.valid_statuses.each do |status|
        %li{:id => "tab-" + status.parameterize}= link_to status, "##{status.parameterize}", onclick: "showRelevantSections(#{status.parameterize.inspect})"

/ SEARCH BAR

.watchlist-section

:coffee
  SectionViews = {}
  _.each HB.Library.validStatuses, (status) -> 
    SectionViews[status] = new HB.Library.SectionView
      model: HB.Library.Sections[status]
    $(".watchlist-section").append SectionViews[status].render().$el
    
  setActiveTab = (section) ->
    $(".option-bar .options li").removeClass "active"
    $(".option-bar .options #tab-" + section).addClass "active"

  @showRelevantSections = (x...) ->
    section = if x[0] then x[0] else window.location.hash.substring(1)
    if section == "all"
      setActiveTab "all"
      $(".watchlist-row").parent().show()
    else if _.contains HB.Library.validStatuses, section
      setActiveTab section
      $(".watchlist-row").parent().hide()
      $("#table-" + section).parent().show()
    else
      showRelevantSections("currently-watching")
      
  showRelevantSections()

  librarySectionContents = {}
  _.each HB.Library.validStatuses, (status) ->
    librarySectionContents[status] = []
  
  @fetchLibrarySection = (section) ->
    unless HB.Library.Sections[section].get "fetched"
      path = "/api/v1/users/#{@user.to_param}/library?status="+section
      $.getJSON(path, (d) ->
        _.each d, (x) -> 
          x.currentUser = #{(user_signed_in? and current_user == @user).inspect}
          librarySectionContents[section].push new HB.Library.Entry x
        collection = HB.Library.Sections[section].entries
        collection.add librarySectionContents[section]
        delete librarySectionContents[section]
        HB.Library.Sections[section].set "fetched", true
      ).error ->
        setTimeout "fetchLibrarySection('"+section+"')", 2000

  _.each HB.Library.validStatuses, (status) -> 
    fetchLibrarySection status
