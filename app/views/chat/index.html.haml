- title "Chat"

.chat
  .row
    .large-10.columns.main-chat#mainChatScroll
      .chats 
        .chat-display
          .chat-text
            %p Loading...
              
    .large-2.columns.onlineUsers
      %h4 Online Users
      %p Loading...
  
  .row
    .large-10.columns
      %form.sendMessage
        .row.collapse
          .small-12.columns
            .small-10.columns
              %input.message(type="text")
            .small-2.columns
              %input.button.prefix(type="submit" value="send")


:coffee
  onlineUsersTemplate = Hogan.compile "
    <h4>Online Users</h4>
    <ul>
      {{#user}}
        <li><a href='{{url}}'>{{name}}</a></li>
      {{/user}}
    </ul>"
  messagesTemplate = Hogan.compile "
    <ul>
      {{#message}}
        <li class='message-block'>
        </li>
      {{/message}}
    </ul>
  "

  ping = ->
    $.getJSON "/chat/ping", (d) ->
      $(".onlineUsers").html onlineUsersTemplate.render {user: d}
  ping()
  setInterval ping, 8000

  updateChatScroll = ->
    c = document.getElementById("mainChatScroll");
    c.scrollTop = c.scrollHeight;

  ChatMessageView = Backbone.View.extend {
    tagName: "li",
    className: "message-block",
    template: Hogan.compile("
      <div class='large-1 columns avatar'>
        <img src='{{user.avatar}}' class='avatar-image' />
      </div>
      <div class='large-10 columns message'>
        <span class='name'><a href='{{user.url}}'>{{user.name}}</a></span>
        <p>{{message}}</p>
      </div>
      <div class='large-2 columns time-stamp' data-created-at='{{created_at}}'>
        <p></p>
      </div>
    "),
    render: ->
      this.$el.html (this.template.render this.model.toJSON())
      return this
  }

  renderAllTimes = ->
    $(".time-stamp").each ->
      $t = $(this)
      $t.find("p").html moment($t.attr('data-created-at')).fromNow()
  setInterval renderAllTimes, 10000

  ChatMessage = Backbone.Model.extend {}
  ChatMessages = new Backbone.Collection
  ChatMessages.comparator = (message) ->
    return moment(message.get("created_at")).unix()

  ChatMessagesViewClass = Backbone.View.extend {
    tagName: "ul",
    initialize: ->
      _(this).bindAll 'add'
      this._views = []
      this.collection.each this.add
      this.collection.bind 'add', this.add,
    add: (c) ->
      cv = new ChatMessageView {model: c}
      this._views.push cv
      if this._rendered
        this.$el.append cv.render().el
        updateChatScroll()
        renderAllTimes()
    render: ->
      that = this
      this._rendered = true
      this.$el.empty()
      _(this._views).each (cv) ->
        that.$el.append cv.render().el
      $(".chat-text").html ''
      $(".chat-text").append this.el
      updateChatScroll()
      renderAllTimes()
  }

  ChatMessagesView = new ChatMessagesViewClass {
    collection: ChatMessages
  }
  ChatMessagesView.render()

  updateMessages = (d) ->
    messages = _.map d, (x) ->
      return (new ChatMessage x)
    messages = _.sortBy(messages, ChatMessages.comparator)
    ChatMessages.set messages, {remove: false}

  getMessagesFromRemote = ->
    $.getJSON "/chat/messages", (d) ->
      updateMessages d

  getMessagesFromRemote()


  $("form.sendMessage").submit ->
    postMessageToServer()
    return false

  postMessageToServer = ->
    $.post '/chat/messages', 
      {message: $("input.message").val()}, 
      (r) -> updateMessages r; $("input.message").val(''),
      'json'
