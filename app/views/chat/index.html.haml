- title "Chat"

.chat
  .row
    .small-12.large-2.columns.onlineUsers
      %h4 Online Users
      %p Loading...

    .small-12.large-10.columns.main-chat#mainChatScroll
      .chats 
        .chat-display
          .chat-text
            %p Loading...      
  
  .row
    .small-12.large-10.columns.input-area.right
      %form.sendMessage
        .row.collapse
          .small-12.columns
            .input-wrapper
              %input.message(type="text" placeholder="Write Something...")
              %i.icon-share-alt{:onclick => "$('form.sendMessage').submit()"}

:coffee
  onlineUsersTemplate = Hogan.compile "
    <h4>Online Users</h4>
    <ul>
      {{#user}}
        <li><a href='{{url}}'>{{name}}</a></li>
      {{/user}}
    </ul>"
  messagesTemplate = Hogan.compile "
    <ul>
      {{#message}}
        <li class='message-block'>
        </li>
      {{/message}}
    </ul>
  "

  ping = ->
    $.getJSON "/chat/ping", (d) ->
      $(".onlineUsers").html onlineUsersTemplate.render {user: d}
      setTimeout ping, 8000
  ping()

  updateChatScroll = (options...) ->
    option = options[0]
    c = document.getElementById("mainChatScroll");
    console.log c.scrollHeight - c.scrollTop
    if (option and option['force']) or c.scrollHeight - c.scrollTop < 600 + 500
      c.scrollTop = c.scrollHeight;

  ChatMessageView = Backbone.View.extend {
    tagName: "li",
    className: "message-block",
    template: Hogan.compile("
      <div class='large-1 columns avatar hide-for-small'>
        <img src='{{user.avatar}}' class='avatar-image' />
      </div>
      <div class='large-10 columns message'>
        <span class='name'><a href='{{user.url}}'>{{user.name}}</a></span>
        <p>{{message}}</p>
      </div>
      <div class='large-2 columns time-stamp' data-created-at='{{created_at}}'>
        <p></p>
        {{#id}}
          <span><i class='icon icon-ok status-icon'></i></span>
        {{/id}}
        {{^id}}
          <span><i class='icon icon-spin icon-spinner status-icon'></i></span>
        {{/id}}
      </div>
    "),
    render: ->
      this.$el.html (this.template.render this.model.toJSON())
      $p = this.$el.find("p")
      $p.html $p.text().autoLink {target: "_blank"}

      youtube_video = null
      gif_url = null
      $p.find("a").each ->
        match = this.href.match /(?:http:\/\/)?(?:www\.)?(?:youtube\.com|youtu\.be)\/(?:watch\?v=)?(.+)/g
        if match
          match = match[0].match /watch\?v=([a-zA-Z0-9\-_]+)/
          youtube_video = match[1]
        else
          # Try GIFs
          match = this.href.match /\.gif$/
          if match
            gif_url = this.href
            
      
      if youtube_video
        iframe = $("<br><iframe width='350' height='240' frameborder='0' 
          allowfullscreen src='http://youtube.com/embed/" + youtube_video + "' />");
        $p.append(iframe)
      else
        if gif_url
          image = $("<br><img src='"+gif_url+"' style='height: 240px; width: auto; max-width: 600'>");
          $p.append(image)
        
      return this
  }

  renderAllTimes = ->
    $(".time-stamp").each ->
      $t = $(this)
      $t.find("p").html moment($t.attr('data-created-at')).fromNow()
  setInterval renderAllTimes, 10000

  ChatMessage = Backbone.Model.extend {}
  ChatMessages = new Backbone.Collection
  ChatMessages.comparator = (message) ->
    return moment(message.get("created_at")).unix()

  ChatMessagesViewClass = Backbone.View.extend {
    tagName: "ul",
    initialize: ->
      _(this).bindAll 'add', 'remove'
      this._views = {}
      this.collection.each this.add
      this.collection.bind 'add', this.add
      this.collection.bind 'remove', this.remove,
    remove: (c) ->
      viewToRemove = _(this._views).select (cv) -> 
        return cv.model == c
      viewToRemove = viewToRemove[0]
      delete this._views[c]
      if this._rendered
        viewToRemove.$el.remove()
    add: (c) ->
      cv = new ChatMessageView {model: c}
      this._views[c] = cv
      if this._rendered
        this.$el.append cv.render().el
        updateChatScroll()
        renderAllTimes()
    render: ->
      that = this
      this._rendered = true
      this.$el.empty()
      this.$el.append $("<div class='panel' style='text-align: center'>Loading... <i class='icon icon-spin icon-spinner' style='margin-left: 10px'></i></div>")
      this.collection.each (c) ->
        that.$el.append that._views[c].render().el
      $(".chat-text").html ''
      $(".chat-text").append this.el
      updateChatScroll()
      renderAllTimes()
  }

  ChatMessagesView = new ChatMessagesViewClass {
    collection: ChatMessages
  }
  ChatMessagesView.render()

  updateMessages = (d) ->
    scrollFlag = ChatMessages.length == 0
    messages = _.map d, (x) ->
      return (new ChatMessage x)
    messages = _.sortBy(messages, ChatMessages.comparator)
    ChatMessages.set messages, {remove: false}
    if scrollFlag
      updateChatScroll({force: true})

  getMessagesURL = ->
    serverChatMessages = ChatMessages.select (x) ->
      return !x.isNew()
    if serverChatMessages.length > 0
      return "/chat/messages?since=" + encodeURIComponent(serverChatMessages[serverChatMessages.length-1].get("created_at"))
    else
      return "/chat/messages"

  if typeof String.prototype.trim == "undefined"
    String.prototype.trim = ->
      return String(this).replace /^\s+|\s+/g, ''

  getMessagesFromRemote = ->
    $.getJSON getMessagesURL(), (d) ->
      localMessages = ChatMessages.select (x) -> 
        return x.isNew()
      ChatMessages.remove _.select localMessages, (local) ->
        _.any d, (remote) ->
          local.get("user_id") == remote["user_id"] and local.get("message").trim() == remote["message"].trim()
      updateMessages d
      setTimeout getMessagesFromRemote, 2000
  getMessagesFromRemote()

  $("form.sendMessage").submit ->
    postMessageToServer()
    return false

  postMessageToServer = ->
    h = {
      user_id: #{current_user.id},
      user: {
        name: #{current_user.name.inspect},
        url: #{user_url(current_user).inspect},
        avatar: #{current_user.avatar.url(:thumb).inspect}
      },
      message: $("input.message").val(),
      created_at: moment().format()
    }
    c = new ChatMessage
    c.set h

    ChatMessages.add c

    $("input.message").val('')

    $.post '/chat/messages', {message: c.get('message')}, 
