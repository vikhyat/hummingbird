- title "Chat"

.chat
  .row
    .small-12.large-2.columns
      .onlineUsers
        %h4 Online Users
        %p Loading...

      .settings
        %h4 Chat Settings
        %form(data-persist="garlic")
          %ul
            %li.desktop-notifications.hide
              .large-12.columns.setting-title
                %span Desktop Notifications
              .large-12.columns.setting-button
                .switch
                  %input#off(checked="" name="desktop-notifications" type="radio")
                  %label(onclick="") Off
                  %input#on(name="desktop-notifications" type="radio")
                  %label(onclick="") On
                  %span
            %li.auto-embedding
              .large-12.columns.settings-title
                %span Auto-embedding
              .large-12.columns.setting-button
                .switch
                  %input#off(name="auto-embedding" type="radio")
                  %label(onclick="") Off
                  %input#on(checked="" name="auto-embedding" type="radio")
                  %label(onclick="") On
                  %span

    .small-12.large-10.columns.main-chat#mainChatScroll
      .chats 
        .chat-display
          .chat-text
            .panel#chatLoading(style='text-align: center')
              Loading...
              %i.fa.fa-spin.fa-spinner(style="margin-left: 10px")
  .row
    .small-12.large-10.columns.input-area.right
      #notificationMessage.large-12.columns.update-banner.hide
        /.red
        %p.update-text 
      %form.sendMessage
        .row.collapse
          .small-12.columns
            .input-wrapper
              %input.message(type="text" placeholder="Write Something...")
              %i.fa.fa-share{:onclick => "$('form.sendMessage').submit()"}
    

:coffee
  $(".settings form").submit -> return false

  myUsername = #{current_user.name.inspect}
  
  if window.webkitNotifications
    $(".desktop-notifications").show()
  $(".desktop-notifications .switch").click ->
    if window.webkitNotifications.checkPermission() != 0
      window.webkitNotifications.requestPermission()

  desktopNotificationsEnabled = ->
    return $(".settings .desktop-notifications input#on")[0].checked

  notifyUser = (image, title, content) ->
    if desktopNotificationsEnabled() and not pageVisible()
      notification = window.webkitNotifications.createNotification image, title, content
      notification.show()
      setTimeout (-> notification.close()), 5000

  autoembeddingEnabled = ->
    return $(".settings .auto-embedding input#on")[0].checked

  onlineUsersTemplate = Hogan.compile "
    <h4>Online Users</h4>
    <ul>
      {{#user}}
        <li><a href='{{url}}' target='_blank'>{{name}}</a></li>
      {{/user}}
    </ul>"
  messagesTemplate = Hogan.compile "
    <ul>
      {{#message}}
        <li class='message-block'>
        </li>
      {{/message}}
    </ul>
  "

  pageVisible = ->
    if typeof document.hidden != "undefined"
      return !document.hidden
    else if typeof document.mozHidden != "undefined"
      return !document.mozHidden
    else if typeof document.msHidden != "undefined"
      return !document.msHidden
    else if typeof document.webkitHidden != "undefined"
      return !document.webkitHidden
    else
      return true
  
  lastUpdateTime = moment()

  updateChatScroll = (options...) ->
    option = options[0]
    c = document.getElementById("mainChatScroll");
    if (option and option['force']) or c.scrollHeight - c.scrollTop < 600 + 500
      c.scrollTop = c.scrollHeight;

  @appendUserNameToTextBox = (name) ->
    q = $("input.message").val()
    $("input.message").focus().val(q + " @" + name + " ")

  ChatMessageView = Backbone.View.extend {
    tagName: "li",
    className: "message-block",
    template: Hogan.compile("
      <div class='large-1 columns avatar hide-for-small'>
        <img src='{{user.avatar}}' class='avatar-image' onClick='appendUserNameToTextBox(\"{{user.name}}\")' />
      </div>
      <div class='large-10 columns message'>
        <span class='name'><a href='{{user.url}}' target='_blank'>{{user.name}}</a></span>
        <p>{{{message}}}</p>
      </div>
      <div class='large-2 columns time-stamp' data-created-at='{{created_at}}'>
        <p></p>
        {{#id}}
          <span><i class='fa fa-check status-icon'></i></span>
        {{/id}}
        {{^id}}
          <span><i class='fa fa-spin fa-spinner status-icon'></i></span>
        {{/id}}
      </div>
    "),
    render: ->
      this.$el.html (this.template.render this.model.toJSON())

      # /me support.
      if this.model.get("message").indexOf("/me") == 0 and this.model.get("message").length > 4
        this.$el.find("div.message p").html this.model.get("message")[3..-1]
        this.$el.find("div.message p").css("display", "inline")
        this.$el.find("div.message").css("padding-top", "8px")

      # Highlight if username is mentioned.
      if this.$el.find("div.message p a[data-user-name='" + myUsername + "']").length > 0
        this.$el.addClass "highlighted"

      if autoembeddingEnabled()
        this.$el.find("p .autoembed").show()
        
      return this
  }

  renderAllTimes = ->
    $(".time-stamp").each ->
      $t = $(this)
      $t.find("p").html moment($t.attr('data-created-at')).fromNow()
  setInterval renderAllTimes, 10000

  ChatMessage = Backbone.Model.extend {}
  ChatMessages = new Backbone.Collection
  ChatMessages.comparator = (message) ->
    return -moment(message.get("created_at")).unix()

  ChatMessagesViewClass = Backbone.View.extend {
    tagName: "ul",
    initialize: ->
      _(this).bindAll 'add', 'remove'
      this.collection.each this.add
      this.collection.bind 'add', this.add
      this.collection.bind 'remove', this.remove,
      
    remove: (c) ->
      if this._rendered
        c.get("_view").$el.remove()

    add: (c) ->
      cv = new ChatMessageView {model: c}
      c.set("_view", cv)
      if this._rendered
        this.renderChild c
        updateChatScroll()
        renderAllTimes()
        
    renderChild: (c) ->
      if c.get("_rendered")
        return
        
      if this.collection.first() == c
        this.$el.append c.get("_view").render().el
        user = c.get("user")
        notifyUser user["avatar"], user["name"], c.get("raw_message")
      else
        this.$el.prepend c.get("_view").render().el

        if this.collection.last() != c and (index = this.collection.indexOf c) > 0
          if index < this.collection.length - 1 and this.collection.at(index+1).get("_rendered")
            this.collection.at(index+1).get("_view").$el.after c.get("_view").$el
          else if this.collection.at(index-1).get("_rendered")
            this.collection.at(index-1).get("_view").$el.before c.get("_view").$el
          else
            beforeElements = this.collection.select (e) ->
              moment(e.get("created_at")).unix() < moment(c.get("created_at")).unix() and e.get("_rendered")
              
            if beforeElements.length > 0
              beforeElement = _.max beforeElements, (e) ->
                moment(e.get("created_at")).unix()
            
            if beforeElement
              beforeElement.get("_view").$el.after c.get("_view").$el
      
      c.set("_rendered", true)
    render: ->
      that = this
      this._rendered = true
      this.$el.empty()
      this.collection.each (c) ->
        that.renderChild c
      $(".chat-text").append this.el
      updateChatScroll()
      renderAllTimes()
  }

  ChatMessagesView = new ChatMessagesViewClass {
    collection: ChatMessages
  }
  ChatMessagesView.render()

  updateMessages = (d) ->
    scrollFlag = ChatMessages.isEmpty()
    messages = _.map d, (x) ->
      return (new ChatMessage x)
    ChatMessages.set messages, {remove: false}
    if scrollFlag
      updateChatScroll({force: true})

  latestChatMessageId = "[[unknown]]"

  getMessagesURL = ->
    serverChatMessages = ChatMessages.select (x) ->
      return !x.isNew()
    if serverChatMessages.length > 0
      return "/chat/messages?latest_chat_message_id=" + latestChatMessageId + "&since=" + encodeURIComponent(serverChatMessages[serverChatMessages.length-1].get("created_at"))
    else
      return "/chat/messages"

  if typeof String.prototype.trim == "undefined"
    String.prototype.trim = ->
      return String(this).replace /^\s+|\s+/g, ''

  getMessagesFromRemote = ->
    $.getJSON getMessagesURL(), (d) ->
      localMessages = ChatMessages.select (x) -> 
        return x.isNew()
      ChatMessages.remove _.select localMessages, (local) ->
        _.any d, (remote) ->
          local.get("user_id") == remote["user_id"] and local.get("message").trim() == remote["raw_message"].trim()
      if d.length > 0
        latestChatMessageId = d[d.length - 1].id
      updateMessages d
      lastUpdateTime = moment()
      setTimeout getMessagesFromRemote, (if pageVisible() then 2000 else 5000)
  getMessagesFromRemote()

  $("form.sendMessage").submit ->
    postMessageToServer()
    return false

  postMessageToServer = ->
    h = {
      user_id: #{current_user.id},
      user: {
        name: #{current_user.name.inspect},
        url: #{user_url(current_user).inspect},
        avatar: #{current_user.avatar.url(:thumb).inspect}
      },
      message: $("input.message").val(),
      created_at: moment().format()
    }
    c = new ChatMessage
    c.set h

    ChatMessages.add c

    $("input.message").val('')

    $.post '/chat/new_message', {message: c.get('message')}, 
  
  checkConnectivity = ->
    if moment().unix() - lastUpdateTime.unix() > 30
      $("#notificationMessage p").html "<i class='fa fa-refresh fa-spin'></i> Trying to reconnect... <a href='/chat'>Please refresh if this takes too long.</a>"
      if moment().unix() % 5 == 0
        getMessagesFromRemote()
      $("#notificationMessage").addClass("red").show()
    else
      if $("#notificationMessage").hasClass("red")
        $("#notificationMessage").hide()

  ping = ->
    $.getJSON "/chat/ping", (d) ->
      $(".onlineUsers").html onlineUsersTemplate.render {user: d["online_users"]}
      # Check if the chat client needs to be refreshed.
      if #{@chat_version} != d["chat_version"]
        $("#notificationMessage p").html "A new update for the chat client is available. <a href='/chat'>Please refresh this page.</a>"
        $("#notificationMessage").removeClass("red").show()
  ping()

  loadHistory = ->
    c = document.getElementById "mainChatScroll"
    loader = document.getElementById "chatLoading"
    if ChatMessages.length > 0 and loader and c.scrollTop - loader.scrollHeight < 200
      time = ChatMessages.last().get("created_at")
      $.getJSON "/chat/messages?until=" + encodeURIComponent(time), (r) ->
        updateMessages r
        c = document.getElementById("mainChatScroll");
        newChatMessages = ChatMessages.select (x) -> moment(x.get("created_at")).unix() < moment(time).unix()
        c.scrollTop = _.reduce newChatMessages, ((x, y) -> x + y.get("_view").el.scrollHeight), 0
        if r.length > 0
          setTimeout loadHistory, 1000
        else
          $("#chatLoading").hide()
    else
      setTimeout loadHistory, 1000
  loadHistory()
        
  # "Tick" once every second, and perform any actions that need to be performed.
  tick = ->
    checkConnectivity()

    # Ping the server (get online users and indicate that we are online)
    pingFrequency = if pageVisible() then 7 else 15
    if moment().unix() % pingFrequency == 0
      ping()
      
  setInterval tick, 1000

:css
  .hummingbird-footer { display: none; }
