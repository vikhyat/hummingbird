.anime-discover
  .filter-toolbar
    .row
      .twelve.columns
        %form.autosubmit
          %ul.inline-list
            %li.three.columns
              %select.autosubmit{:class => "single-select", :name => "filter"}
                %option{:value => "all", :selected => ("selected" if @filter == "all")}
                  %i.icon-globe
                  All Anime
                %option{:value => "recommended", :selected => ("selected" if @filter == "recommended")}
                  %i.icon-heart
                  Recommendations
                %option{:value => "unseen", :selected => ("selected" if @filter == "unseen")}
                  %i.icon-eye-close
                  Haven't Seen
                %option{:value => "unfinished", :selected => ("selected" if @filter == "unfinished")}
                  %i.icon-tasks
                  Haven't finished

          %ul.inline-list
            %li.three.columns
              %select{:multiple => "multiple", :class => "multiple-select", :name => "genres[]"}
                - @all_genres.each do |genre|
                  %option{:value => "#{genre.slug}", :selected => ("selected" if @genre_filter.include? genre)}
                    %i.icon-film
                    = genre.name

          %ul.inline-list
            %li.three.columns
              %select{:multiple => "multiple", :class => "multiple-nofiltera", :name => "types[]"}
                %option{:disabled => "disabled"}
                  Series
                %option{:disabled => "disabled"}
                  OVA / SPECIAL

          %ul.inline-list.where-to-watch
            %li.three.columns
              %select{:multiple => "multiple", :class => "multiple-nofilterb", :name => "watch[]"}
                %option{:disabled => "disabled"}
                  Netflix
                %option{:disabled => "disabled"}
                  Hulu
                %option{:disabled => "disabled"}
                  Crunchyroll
                %option{:disabled => "disabled"}
                  Funimation
                %option{:disabled => "disabled"}
                  Viz

  .row.content-body
    .anime-grid.twelve.columns
      - if @filter == "recommended" and !current_user.recommendations_up_to_date
        %div.alert-box
          %span.updating_recommendations We're updating your recommendations. 
          %span.check_back Check back in a minute!
        :javascript
          function checkForCompletion() {
            $.getJSON("/users.json", function(data) { 
              if (!data["recommendations_up_to_date"]) {
                $("span.check_back").html("Hang on!");
                setTimeout("checkForCompletion()", 5000);
              }
              else {
                $("span.updating_recommendations").html("We're done updating your recommendations.");
                $("span.check_back").html("<a href='/anime?filter=recommended'>Check them out!</a>");
              }
            });
          }
          checkForCompletion();
      .row
        - if @collection.length > 0
          = render partial: "anime/card", collection: @collection, as: :data
        - else
          .not-found.panel
            .title.twelve-columns
              %h3 We couldn't find what you were looking for!
              %p To make up for that, here's some random anime... have fun!

          //= render random anime here. Amount is up to you.

      .row.pagination-centered
        = paginate(@anime)

:javascript
  function capitalize(s) {
    return s[0].toUpperCase() + s.substring(1);
  }
  $(".multiple-select").multiselect({
    close: function() {
      $("form.autosubmit").submit();
    },
    noneSelectedText: "All Genres",
    selectedList: 2,
    selectedText: function (c, t, a) {
      if (c == t) {
        return "All Genres";
      }
      else if (c == 2) {
        return capitalize(a[0].value) + ", " + capitalize(a[1].value);
      }
      else if (c == 1) {
        return capitalize(a[0].value);
      }
      else {
        return c + " genres selected";
      }
    }
  }).multiselectfilter();
  $(".multiple-nofiltera").multiselect({
    noneSelectedText: "Any Type",
    header: "coming soon!",
    selectedList: 3 // 0-based index
  });
  $(".multiple-nofilterb").multiselect({
    noneSelectedText: "Watch Anywhere",
    header: "coming soon!",
    selectedList: 3 // 0-based index
  });
  $(".single-select").multiselect({
    multiple: false,
    header: "Select an option",
    noneSelectedText: "Select an Option",
    selectedList: 1
  });

- if user_signed_in?
  = render partial: "watchlists/form_modal", collection: @collection.map {|x| x[1] || Watchlist.new(user: current_user, anime: x[0]) }, as: :watchlist
